#!/bin/bash
#
# Copyright (c) 2020 GaÃ«l PORTAY
#
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# https://www.freedesktop.org/software/systemd/man/systemd.offline-updates.html

set -e
set -u
set -o pipefail

# Make sure to remove the /system-update symlink as early as possible in the
# update script to avoid reboot loops in case the update fails.
rm -f /system-update

notice() {
	if [[ ! -t 0 ]] && [[ ! -t 2 ]]
	then
		echo "$@"
	fi
}

info() {
	if plymouth --ping 2>/dev/null
	then
		plymouth display-message --text="$*"
	fi

	notice "$@"
}

progress() {
	if plymouth --ping 2>/dev/null
	then
		plymouth system-update --progress="$1"
	fi

	notice -n "$1 "
}

# If your script succeeds you should trigger the reboot in your own code, for
# example by invoking logind's Reboot() call or calling systemctl reboot. See
# logind dbus API for details.
trap 'if [ $? -eq 0 ]; then systemctl reboot; fi' 0
i=0
step=
while read -r -a words
do
	# empty line: skip it! 
	if [[ "${#words[@]}" -eq 0 ]]
	then
		continue
	fi

	# the pacman steps:
	# :: Synchronizing package databases...
	# :: Starting full system upgrade...
	# :: Proceed with installation? [Y/n]
	# :: Retrieving packages...
	# :: Running pre-transaction hooks...
	# :: Processing package changes...
	# :: Running post-transaction hooks...
	if [[ "${words[0]}" =~ :: ]]
	then
		i=0
		step="${words[*]:1}"
		if [[ "$step" == "Synchronizing package databases..." ]] ||
		   [[ "$step" == "Retrieving packages..."             ]] ||
		   [[ "$step" == "Running pre-transaction hooks..."   ]] ||
		   [[ "$step" == "Running post-transaction hooks..."  ]]
		then
			if plymouth --ping 2>/dev/null &&
			   [[ "$step" == "Running post-transaction hooks..." ]]
			then
				plymouth change-mode --boot-up
			fi
			info "$step"
		elif plymouth --ping 2>/dev/null && [[ "${count:-}" ]] &&
		     [[ "$step" == "Processing package changes..." ]]
		then
			plymouth change-mode --system-upgrade
		fi
		continue
	fi

	# :: Starting full system upgrade...
	# resolving dependencies...
	# looking for conflicting packages...
	#
	# Packages (4) pkg1 pkg2 pkg3 pkg4
	#
	# Total Download Size:   ##.## MiB
	# Total Installed Size:  ##.## MiB
	# Net Upgrade Size:      ##.## MiB
	#
	if [[ "${words[0]}" == "Packages" ]]
	then
		# Packages (4) (...)
		if [[ "${words[1]}" =~ ^\([0-9]+\)$ ]]
		then
			count="${words[1]:1:$((${#words[1]}-2))}"
		fi
	# :: Retrieving packages...
	# downloading pkg...
	# :: Processing package changes...
	# upgrading pkg...
	elif [[ "${words[0]}" =~ ^(downloading|installing|upgrading)$ ]] &&
	     [[ "$step"       != "Synchronizing package databases..." ]]
	then
		i="$((i+1))"
		processing="${words[0]:0:1}"
		processing="${processing^^}"
		processing+="${words[0]:1}"
		if [[ -z "${count:-}" ]]
		then
			info "$processing ${words[1]}"
			continue
		elif [[ "${words[0]}" == downloading ]]
		then
			info "$processing ${words[1]} ($i/$count)"
			continue
		fi

		progress "$(((100*i)/count))"
		notice "$processing ${words[1]} ($i/$count)"
		continue
	fi
done < <(pacman --noconfirm --noprogressbar -Su "$@")

info "Rebooting..."
sleep 5s
